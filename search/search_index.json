{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs \u00b6 For full documentation visit mkdocs.org . Commands \u00b6 mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout \u00b6 mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to MkDocs"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"%E5%9F%8B%E5%A0%86%E5%A0%86%E7%BD%91%E7%BB%9C%E9%83%A8%E5%88%86%E6%A2%B3%E7%90%86/","text":"\u57cb\u5806\u5806\u7f51\u7edc\u6846\u67b6\u68b3\u7406 \u00b6 \u672c\u4ee3\u7801\u57fa\u4e8e\u4ed3\u5e93 branch_4.1.00 \u5206\u6790 1.\u4f7f\u7528\u4f8b\u5b50 \u00b6 \u9996\u5148\u662f\u65e5\u5e38\u4f7f\u7528\u7684\u6700\u7b80\u5355\u7684\u4f8b\u5b50\uff1a Api \u63a5\u53e3\u7684\u5b9a\u4e49 interface ApiService { @POST ( ApiURL . GET_SPLASH_IMAGE ) LiveData < ApiResponse < ResponseModel < List < SplashModel >>>> getSplashImageTask ( @Body RequestParam < NoneParam > requestParam ); } \u4f7f\u7528 LiveData \u6765\u53d1\u9001\u7f51\u7edc\u8bf7\u6c42 class Reposititry : BaseReository () { fun getSplashImageIage ( dataParam : NoneParam?) : LiveData < Resource < List < SplashModel?> ?>> { val requestParam = paraWrapper ( ApiURL . GET_SPLASH_IMAGE , dataParam ) return object : NetworkResource < List < SplashModel?> ?> (){ override fun createCall (): LiveData < ApiResponse < ResponseModel < List < SplashModel?> ?>>> { return retrofitService . getSplashImageTask ( requestParam ) } }. asLiveData () } } \u5728\u6b63\u5f0f\u5f00\u59cb\u4e4b\u524d\uff0c\u4ecb\u7ecd\u51e0\u4e2a\u57fa\u7840\u7684\u7c7b\u65b9\u4fbf\u5907\u5fd8\uff1a httpService ApiResponse RetrofitService NetworkResource BaseRepositoryLab BaseViewModel RetrofitDelegate 2.retrofitService \u00b6 \u6211\u4eec\u5148\u6765\u8ddf\u8fdb\u8fd9\u4e2a\u65b9\u6cd5\uff0c\u770b\u770b\u5728\u662f\u600e\u4e48\u83b7\u53d6\u5230 RetrofitService \u8fd9\u4e2a\u5b9e\u4f53\u65b9\u6cd5\u7684\u3002 public class BaseRepository { RetrofitService getRetrofitService () { return HttpService . getRetrofitService (); } } \u8fd9\u91cc\u901a\u8fc7 HttpService \u6765\u83b7\u53d6\u5177\u4f53\u7684 Retrofit \u7684\u5b9e\u4f8b public class HttpService { ... public static RetrofitService getRetrofitService () { if ( null == retrofitService ) { retrofitService = RetrofitDelegate . create ( new Retrofit . Builder (). baseUrl ( ApiURL . BASE_URL ) . addConverterFactory ( GsonConverterFactory . create ( GsonFactory . getSingletonGson ())) . addCallAdapterFactory ( new LiveDataCallAdapterFactory ()) . client ( createOkHttpClient ()) . build (). create ( RetrofitService . class )); } return retrofitService ; } ... } \u57fa\u672c\u5c31\u662f\u6b63\u5e38\u7684\u521b\u5efa Retrofit \u7684\u521b\u5efa\u8fc7\u7a0b\u6765\u83b7\u53d6\u5177\u4f53 Retrofit \u7684\u65b9\u6cd5\u3002 PS:\u8fd9\u91cc\u5efa\u8bae\u76f4\u63a5\u4f7f\u7528\u4f9d\u8d56\u6ce8\u5165\u7684\u65b9\u5f0f\u8fdb\u884c\u6ce8\u518c\uff0c\u51cf\u5c11\u6a21\u677f\u4ee3\u7801\u4ee5\u53ca\u591a\u7ebf\u7a0b\u91cd\u590d\u521b\u5efa\u95ee\u9898\u3002 \u8fd9\u91cc\u4e3b\u8981\u662f\u4e09\u4e2a\u81ea\u5b9a\u4e49\u7684\u6587\u4ef6\uff1a addConverterFactory\uff08GsonConverterFactory.create(GsonFactory.getSingletonGson())\uff09 addCallAdapterFactory\uff08new LiveDataCallAdapterFactory()\uff09 client\uff08createOkHttpClient()\uff09 \u9996\u5148\u6765\u770b createOkHttpClient private static OkHttpClient createOkHttpClient () { //Headers\u62e6\u622a\u5668 Interceptor headersInterceptor = new Interceptor () { @Override public Response intercept ( Chain chain ) throws IOException { Request original = chain . request (); Request request = original . newBuilder () . header ( \"version\" , BuildConfig . VERSION_NAME ) . header ( \"Referer\" , \"mdd\" ) . header ( \"User-Agent\" , \"Mdd/\" + BuildConfig . VERSION_NAME + \" (Android+\" + Build . VERSION . SDK_INT + \"+)\" ) . build (); return chain . proceed ( request ); } }; //\u5728\u6d4b\u8bd5\u6a21\u5f0f\u4e0b\uff0c\u662f\u5426\u5f00\u542fChuck\u6293\u5305 boolean isOpenDebug = SPUtils . getBoolean ( SpConstant . IS_OPEN_HTTP_LOG , false ); //\u5b9a\u5236OkHttp OkHttpClient . Builder httpClientBuilder = new OkHttpClient . Builder (); httpClientBuilder = httpClientBuilder . connectTimeout ( 30 , TimeUnit . SECONDS ) //\u8bbe\u7f6e\u8fde\u63a5\u8d85\u65f6\u65f6\u95f4 . readTimeout ( 30 , TimeUnit . SECONDS ); //\u8bbe\u7f6e\u8bfb\u53d6\u8d85\u65f6\u65f6\u95f4 //OkHttp\u6dfb\u52a0\u62e6\u622a\u5668 //httpClientBuilder.addInterceptor(headersInterceptor); if ( BuildConfig . IS_LOG ){ //Log\u62e6\u622a\u5668 HttpLogInterceptor logInterceptor = new HttpLogInterceptor ( new HttpLogInterceptor . Logger () { @Override public void log ( String message ) { if ( TextUtils . isEmpty ( message )) { return ; } int segmentSize = 3 * 1024 ; long length = message . length (); if ( length <= segmentSize ) { // \u957f\u5ea6\u5c0f\u4e8e\u7b49\u4e8e\u9650\u5236\u76f4\u63a5\u6253\u5370 Log . i ( TAG , message ); return ; } // \u5faa\u73af\u5206\u6bb5\u6253\u5370\u65e5\u5fd7 while ( message . length () > segmentSize ) { String logContent = message . substring ( 0 , segmentSize ); message = message . replace ( logContent , \"\" ); Log . i ( TAG , logContent ); } // \u6253\u5370\u5269\u4f59\u65e5\u5fd7 Log . i ( TAG , message ); } }); //\u65e5\u5fd7\u663e\u793a\u7ea7\u522b logInterceptor . setLevel ( HttpLogInterceptor . Level . BODY ); httpClientBuilder . addInterceptor ( logInterceptor ); } //\u6d4b\u8bd5\u6a21\u5f0f\u4e0b\u624d\u52a0\u5165\u8bf7\u6c42\u62e6\u622a if ( BuildConfig . IS_LOG && isOpenDebug ){ httpClientBuilder . addInterceptor ( new ChuckInterceptor ( MddApplication . app )); } //noAuthHttps(httpClientBuilder); //\u52a0\u5165head httpClientBuilder . addInterceptor ( headersInterceptor ); okHttpClient = httpClientBuilder . build (); return okHttpClient ; } \u81ea\u5df1\u5b9a\u5236\u7684 OkhttpClient \u57fa\u672c\u90fd\u662f\u4e00\u4e9b\u79c1\u6709\u8ba2\u5236\u7684\u5c5e\u6027\u3002 addConverterFactory\uff08GsonConverterFactory.create(GsonFactory.getSingletonGson())\uff09 \u8fd9\u91cc\u4f7f\u7528\u4e86 Gson \u89e3\u6790\u7684\u5bb9\u9519\u9002\u914d\u5668\uff0c\u5730\u5740\u5728 MddGsonFactory \uff0c\u9632\u6b62\u540e\u7aef Api \u4e0d\u591f\u6807\u51c6\u7684\u5bb9\u9519\u673a\u5236 addCallAdapterFactory(new LiveDataCallAdapterFactory()) public class LiveDataCallAdapterFactory extends CallAdapter . Factory { @Override public CallAdapter <? , ?> get ( Type returnType , Annotation [] annotations , Retrofit retrofit ) { if ( getRawType ( returnType ) != LiveData . class ) { return null ; } Type observableType = getParameterUpperBound ( 0 , ( ParameterizedType ) returnType ); Class <?> rawObservableType = getRawType ( observableType ); if ( rawObservableType != ApiResponse . class ) { throw new IllegalArgumentException ( \"type must be a resource\" ); } if ( ! ( observableType instanceof ParameterizedType )) { throw new IllegalArgumentException ( \"resource must be parameterized\" ); } Type bodyType = getParameterUpperBound ( 0 , ( ParameterizedType ) observableType ); return new LiveDataCallAdapter <> ( bodyType ); } } \u4f7f\u7528 LiveData \u9002\u914d\u5668\u505a\u4e86\u8f6c\u6362\u5904\u7406\u3002 3.NetworkResource \u00b6 \u53ef\u4ee5\u770b\u5230\u5728\u53d1\u9001\u7f51\u7edc\u8bf7\u6c42\u7684\u65f6\u5019\uff0c\u5bf9\u6b64\u7c7b\u8fdb\u884c\u8fd4\u56de\uff0c\u8fd9\u91cc\u662f\u5c06\u7f51\u7edc\u8bf7\u6c42\u7684\u56de\u8c03\u6570\u636e\u8fdb\u884c\u9884\u5904\u7406\uff0c\u91c7\u7528\u4e86\u62bd\u8c61\u65b9\u6cd5\uff0c\u5e76\u628a\u4e3b\u8981 careateCall \u65b9\u6cd5\u66b4\u9732\u51fa\u6765\uff0c\u6765\u8ddf\u4e0a\u4e00\u6b65\u8fdb\u884c\u8854\u63a5\uff0c\u83b7\u53d6\u7f51\u7edc\u6570\u636e\u540e\u8fdb\u884c\u6570\u636e\u9884\u5904\u7406\u3002\u5177\u4f53\u4ee3\u7801\u5982\u4e0b\uff1a public abstract class NetworkResource < T > { private final MediatorLiveData < Resource < T >> result = new MediatorLiveData <> (); @MainThread public NetworkResource () { result . setValue (( Resource < T > ) Resource . loading ( null , getRequestParam ())); fetchFromNetwork (); } @MainThread private void setValue ( Resource < T > newValue ) { if ( ! Objects . equals ( result . getValue (), newValue )) { result . setValue ( newValue ); } } private void fetchFromNetwork () { final LiveData < ApiResponse < ResponseModel < T >>> apiResponse = createCall (); result . addSource ( apiResponse , new Observer < ApiResponse < ResponseModel < T >>> () { @Override public void onChanged ( @Nullable final ApiResponse < ResponseModel < T >> requestTypeApiResponse ) { result . removeSource ( apiResponse ); final ResponseModel < T > responseModel = requestTypeApiResponse . body ; if ( requestTypeApiResponse . isSuccessful () && null != responseModel && responseModel . isSuccessful ()) { if ( responseModel . getActivityData () != null && responseModel . getActivityData (). getTaskInfo () != null ) { //\u6d3b\u52a8\u4efb\u52a1\u5b8c\u6210\u63d0\u793a TaskResultEvent . post ( responseModel . getActivityData ()); } setValue ( Resource . success ( requestTypeApiResponse , responseModel . getMsg (), responseModel . getMsgType (), responseModel . getData (), getRequestParam ())); } else { if ( null == responseModel ) { boolean isConnect = NetworkUtils . isNetworkConnected ( MddApplication . getApp ()); //\u5224\u65ad\u662f\u4e0d\u662f\u7f51\u7edc\u9519\u8bef if ( isConnect ) { setValue ( Resource . error ( requestTypeApiResponse , \"\u670d\u52a1\u5668\u51fa\u9519\uff0c\u8bf7\u7a0d\u540e\u91cd\u8bd5\" , getRequestParam ())); } else { setValue ( Resource . error ( requestTypeApiResponse , ResponseCode . ERROR_NO_NETWORK , \"\u4f3c\u4e4e\u5df2\u65ad\u5f00\u7f51\u7edc\u8fde\u63a5\uff0c\u8bf7\u68c0\u67e5\u7f51\u7edc\" , getRequestParam ())); } } else if ( responseModel . getMsgType () >= 1 && responseModel . getMsgType () <= 99 ) { //Token\u8fc7\u671f\u6253\u70b9\u901a\u77e5\u4e8b\u4ef6 TokenExpireEvent expireEvent = new TokenExpireEvent (); expireEvent . setRequestURL ( requestTypeApiResponse . requestURL ); expireEvent . setCode ( responseModel . getMsgType ()); expireEvent . setErrorMessage ( responseModel . getMsg ()); TokenExpireEvent . post ( expireEvent ); setValue ( Resource . tokenExpired ( requestTypeApiResponse , responseModel . getData (), getRequestParam ())); } else { setValue ( Resource . error ( requestTypeApiResponse , responseModel . getMsg (), responseModel . getMsgType (), responseModel . getData (), getRequestParam ())); } } } }); } public LiveData < Resource < T >> asLiveData () { return result ; } @NonNull @MainThread protected abstract LiveData < ApiResponse < ResponseModel < T >>> createCall (); protected BaseParam getRequestParam () { return null ; } } 4.BaseRepository.paramWrapper \u00b6 \u8fd9\u4e2a\u65b9\u6cd5\u662f\u5bf9\u7f51\u7edc\u8bf7\u6c42\u53c2\u6570\u8fdb\u884c\u5305\u88c5\uff0c \u4e3b\u8981\u662f\u4e3a\u4e86\u8fdb\u884c md5 \u8fdb\u7b7e\u540d\uff0c\u540c\u65f6\u5bf9\u901a\u7528\u8bf7\u6c42\u6570\u636e\u8fdb\u884c\u6392\u5e8f\uff0c\u4fdd\u8bc1\u6570\u636e\u5b57\u7b26\u4e32\u7684\u987a\u5e8f\uff0c\u5728\u8fdb\u884c md5 \u7b7e\u540d\u6821\u9a8c\uff0c\u5177\u4f53\u7684\u53c2\u6570\u5982\u4e0b\uff1a RequestParam < T > requestParam = new RequestParam <> (); requestParam . setData ( data ); requestParam . setAppToken ( appToken ); requestParam . setTime ( time ); requestParam . setOs ( BuildConfig . OS ); requestParam . setVersion ( BuildConfig . VERSION_NAME ); requestParam . setChannel ( AppInfoModel . APP_CHANNEL ); requestParam . setDeviceNum ( AppInfoModel . UNIQUE_ID ); requestParam . setVisitorStatus ( visitorStatus ); \u6392\u5e8f\u7b7e\u540d\u51fd\u6570\uff1a StringBuilder dataStr = new StringBuilder (); try { String beanToJson = JsonUtil . beanToJson ( data ); if ( data instanceof List ) { JSONArray array = new JSONArray ( beanToJson ); int length = array . length (); for ( int i = 0 ; i < length ; i ++ ) { JSONObject obj = array . getJSONObject ( i ); Iterator < String > dataKeys = (( JSONObject ) obj ). keys (); List < String > dataKeyList = new ArrayList < String > (); while ( dataKeys . hasNext ()){ dataKeyList . add ( dataKeys . next ()); } Collections . sort ( dataKeyList ); for ( String dataKey : dataKeyList ) { dataStr . append ( dataKey ). append ( \"=\" ). append ( obj . get ( dataKey )). append ( \"&\" ); } } } else { JSONObject jsonObject = new JSONObject ( beanToJson ); Iterator < String > dataKeys = jsonObject . keys (); List < String > dataKeyList = new ArrayList <> (); while ( dataKeys . hasNext ()){ dataKeyList . add ( dataKeys . next ()); } Collections . sort ( dataKeyList ); for ( String dataKey : dataKeyList ) { dataStr . append ( dataKey ). append ( \"=\" ). append ( jsonObject . get ( dataKey )). append ( \"&\" ); } } } catch ( JSONException e ) { return requestParam ; } String signStr = \"os:\" + BuildConfig . OS + \"|version:\" + BuildConfig . VERSION_NAME + \"|action:/\" + action + \"|time:\" + requestParam . getTime () + \"|appToken:\" + appToken + \"|privateKey:\" + ApiURL . privateKey + \"|data:\" + dataStr . toString (); LogUtil . v ( \"SignStr:\" , signStr ); String sign = MD5 . MD5Encode ( signStr ); \u7136\u540e\u653e\u5230\u8bf7\u6c42\u53c2\u6570\u540e\uff0c\u8fd4\u56de\u8bf7\u6c42\u53c2\u6570\uff1a requestParam . setSign ( sign ); requestParam . setDeviceType ( AppInfoModel . isTabletDevice ? 1 : 0 ); return requestParam ; 5.\u5c0f\u7ed3 \u00b6 \u91c7\u7528 LiveData \u7684\u65b9\u5f0f\u8fdb\u884c\u53cc\u5411\u7ed1\u5b9a\uff0c\u6765\u8fdb\u884c\u7f51\u7edc\u8bf7\u6c42\u662f\u4f18\u70b9\uff0c\u4f7f\u7528\u6bd4\u8f83\u7b80\u5355\uff0c\u4f46\u540c\u65f6\u9ad8\u5ea6\u7684\u8026\u5408\u6027\u4e5f\u5bf9\u540e\u9762\u7684\u6269\u5c55\u4ea7\u751f\u4e86\u56f0\u96be\uff0c\u671f\u671b \u5728\u4e0b\u671f\u6216\u8005\u540e\u671f\u8fdb\u884c\u5355\u72ec\u62bd\u51fa\u4f7f\u7528\uff0c\u65b9\u4fbf\u6362\u5f15\u64ce\u6216\u8005\u8fdb\u884c\u5355\u70b9\u6d4b\u8bd5\u7b49\uff08\u82e5\u540e\u9762\u53ef\u4ee5\u4f7f\u7528\u534f\u6210\u7b49\u4e5f\u6709\u5f88\u597d\u7684\u6269\u5c55\u6027\uff09\uff0c\u540c\u65f6\u671f\u671b\u5bf9\u540e\u9762\u7684\u9519\u8bef\u56de\u8c03\uff0c\u9519\u8bef\u91cd\u8bd5\u7f13\u5b58\u7b56\u7565\u7b49\uff0c\u7528\u53c2\u6570\u65b9\u5f0f\u8fdb\u884c\u914d\u7f6e\u6765\u4f18\u5316\u3002 6. FAQ \u00b6 \u4e3a\u4ec0\u4e48\u8981\u5bf9\u7f51\u7edc\u53c2\u6570\u8fdb\u884c\u6392\u5e8f \u56e0\u4e3a\u8981\u548c iOS \u7b7e\u540d\u7b97\u6cd5\u7edf\u4e00\uff0c\u90a3\u53c2\u6570\u5c31\u8981\u4fdd\u8bc1\u4e00\u6837\u7684\u987a\u5e8f\uff0c\u5219\u91c7\u7528\u53c2\u6570\u6392\u5e8f\u6765\u5bf9\u53c2\u6570\u4e00\u4e00\u5165\u5217","title":"\u57cb\u5806\u5806\u7f51\u7edc\u6846\u67b6\u68b3\u7406"},{"location":"%E5%9F%8B%E5%A0%86%E5%A0%86%E7%BD%91%E7%BB%9C%E9%83%A8%E5%88%86%E6%A2%B3%E7%90%86/#_1","text":"\u672c\u4ee3\u7801\u57fa\u4e8e\u4ed3\u5e93 branch_4.1.00 \u5206\u6790","title":"\u57cb\u5806\u5806\u7f51\u7edc\u6846\u67b6\u68b3\u7406"},{"location":"%E5%9F%8B%E5%A0%86%E5%A0%86%E7%BD%91%E7%BB%9C%E9%83%A8%E5%88%86%E6%A2%B3%E7%90%86/#1","text":"\u9996\u5148\u662f\u65e5\u5e38\u4f7f\u7528\u7684\u6700\u7b80\u5355\u7684\u4f8b\u5b50\uff1a Api \u63a5\u53e3\u7684\u5b9a\u4e49 interface ApiService { @POST ( ApiURL . GET_SPLASH_IMAGE ) LiveData < ApiResponse < ResponseModel < List < SplashModel >>>> getSplashImageTask ( @Body RequestParam < NoneParam > requestParam ); } \u4f7f\u7528 LiveData \u6765\u53d1\u9001\u7f51\u7edc\u8bf7\u6c42 class Reposititry : BaseReository () { fun getSplashImageIage ( dataParam : NoneParam?) : LiveData < Resource < List < SplashModel?> ?>> { val requestParam = paraWrapper ( ApiURL . GET_SPLASH_IMAGE , dataParam ) return object : NetworkResource < List < SplashModel?> ?> (){ override fun createCall (): LiveData < ApiResponse < ResponseModel < List < SplashModel?> ?>>> { return retrofitService . getSplashImageTask ( requestParam ) } }. asLiveData () } } \u5728\u6b63\u5f0f\u5f00\u59cb\u4e4b\u524d\uff0c\u4ecb\u7ecd\u51e0\u4e2a\u57fa\u7840\u7684\u7c7b\u65b9\u4fbf\u5907\u5fd8\uff1a httpService ApiResponse RetrofitService NetworkResource BaseRepositoryLab BaseViewModel RetrofitDelegate","title":"1.\u4f7f\u7528\u4f8b\u5b50"},{"location":"%E5%9F%8B%E5%A0%86%E5%A0%86%E7%BD%91%E7%BB%9C%E9%83%A8%E5%88%86%E6%A2%B3%E7%90%86/#2retrofitservice","text":"\u6211\u4eec\u5148\u6765\u8ddf\u8fdb\u8fd9\u4e2a\u65b9\u6cd5\uff0c\u770b\u770b\u5728\u662f\u600e\u4e48\u83b7\u53d6\u5230 RetrofitService \u8fd9\u4e2a\u5b9e\u4f53\u65b9\u6cd5\u7684\u3002 public class BaseRepository { RetrofitService getRetrofitService () { return HttpService . getRetrofitService (); } } \u8fd9\u91cc\u901a\u8fc7 HttpService \u6765\u83b7\u53d6\u5177\u4f53\u7684 Retrofit \u7684\u5b9e\u4f8b public class HttpService { ... public static RetrofitService getRetrofitService () { if ( null == retrofitService ) { retrofitService = RetrofitDelegate . create ( new Retrofit . Builder (). baseUrl ( ApiURL . BASE_URL ) . addConverterFactory ( GsonConverterFactory . create ( GsonFactory . getSingletonGson ())) . addCallAdapterFactory ( new LiveDataCallAdapterFactory ()) . client ( createOkHttpClient ()) . build (). create ( RetrofitService . class )); } return retrofitService ; } ... } \u57fa\u672c\u5c31\u662f\u6b63\u5e38\u7684\u521b\u5efa Retrofit \u7684\u521b\u5efa\u8fc7\u7a0b\u6765\u83b7\u53d6\u5177\u4f53 Retrofit \u7684\u65b9\u6cd5\u3002 PS:\u8fd9\u91cc\u5efa\u8bae\u76f4\u63a5\u4f7f\u7528\u4f9d\u8d56\u6ce8\u5165\u7684\u65b9\u5f0f\u8fdb\u884c\u6ce8\u518c\uff0c\u51cf\u5c11\u6a21\u677f\u4ee3\u7801\u4ee5\u53ca\u591a\u7ebf\u7a0b\u91cd\u590d\u521b\u5efa\u95ee\u9898\u3002 \u8fd9\u91cc\u4e3b\u8981\u662f\u4e09\u4e2a\u81ea\u5b9a\u4e49\u7684\u6587\u4ef6\uff1a addConverterFactory\uff08GsonConverterFactory.create(GsonFactory.getSingletonGson())\uff09 addCallAdapterFactory\uff08new LiveDataCallAdapterFactory()\uff09 client\uff08createOkHttpClient()\uff09 \u9996\u5148\u6765\u770b createOkHttpClient private static OkHttpClient createOkHttpClient () { //Headers\u62e6\u622a\u5668 Interceptor headersInterceptor = new Interceptor () { @Override public Response intercept ( Chain chain ) throws IOException { Request original = chain . request (); Request request = original . newBuilder () . header ( \"version\" , BuildConfig . VERSION_NAME ) . header ( \"Referer\" , \"mdd\" ) . header ( \"User-Agent\" , \"Mdd/\" + BuildConfig . VERSION_NAME + \" (Android+\" + Build . VERSION . SDK_INT + \"+)\" ) . build (); return chain . proceed ( request ); } }; //\u5728\u6d4b\u8bd5\u6a21\u5f0f\u4e0b\uff0c\u662f\u5426\u5f00\u542fChuck\u6293\u5305 boolean isOpenDebug = SPUtils . getBoolean ( SpConstant . IS_OPEN_HTTP_LOG , false ); //\u5b9a\u5236OkHttp OkHttpClient . Builder httpClientBuilder = new OkHttpClient . Builder (); httpClientBuilder = httpClientBuilder . connectTimeout ( 30 , TimeUnit . SECONDS ) //\u8bbe\u7f6e\u8fde\u63a5\u8d85\u65f6\u65f6\u95f4 . readTimeout ( 30 , TimeUnit . SECONDS ); //\u8bbe\u7f6e\u8bfb\u53d6\u8d85\u65f6\u65f6\u95f4 //OkHttp\u6dfb\u52a0\u62e6\u622a\u5668 //httpClientBuilder.addInterceptor(headersInterceptor); if ( BuildConfig . IS_LOG ){ //Log\u62e6\u622a\u5668 HttpLogInterceptor logInterceptor = new HttpLogInterceptor ( new HttpLogInterceptor . Logger () { @Override public void log ( String message ) { if ( TextUtils . isEmpty ( message )) { return ; } int segmentSize = 3 * 1024 ; long length = message . length (); if ( length <= segmentSize ) { // \u957f\u5ea6\u5c0f\u4e8e\u7b49\u4e8e\u9650\u5236\u76f4\u63a5\u6253\u5370 Log . i ( TAG , message ); return ; } // \u5faa\u73af\u5206\u6bb5\u6253\u5370\u65e5\u5fd7 while ( message . length () > segmentSize ) { String logContent = message . substring ( 0 , segmentSize ); message = message . replace ( logContent , \"\" ); Log . i ( TAG , logContent ); } // \u6253\u5370\u5269\u4f59\u65e5\u5fd7 Log . i ( TAG , message ); } }); //\u65e5\u5fd7\u663e\u793a\u7ea7\u522b logInterceptor . setLevel ( HttpLogInterceptor . Level . BODY ); httpClientBuilder . addInterceptor ( logInterceptor ); } //\u6d4b\u8bd5\u6a21\u5f0f\u4e0b\u624d\u52a0\u5165\u8bf7\u6c42\u62e6\u622a if ( BuildConfig . IS_LOG && isOpenDebug ){ httpClientBuilder . addInterceptor ( new ChuckInterceptor ( MddApplication . app )); } //noAuthHttps(httpClientBuilder); //\u52a0\u5165head httpClientBuilder . addInterceptor ( headersInterceptor ); okHttpClient = httpClientBuilder . build (); return okHttpClient ; } \u81ea\u5df1\u5b9a\u5236\u7684 OkhttpClient \u57fa\u672c\u90fd\u662f\u4e00\u4e9b\u79c1\u6709\u8ba2\u5236\u7684\u5c5e\u6027\u3002 addConverterFactory\uff08GsonConverterFactory.create(GsonFactory.getSingletonGson())\uff09 \u8fd9\u91cc\u4f7f\u7528\u4e86 Gson \u89e3\u6790\u7684\u5bb9\u9519\u9002\u914d\u5668\uff0c\u5730\u5740\u5728 MddGsonFactory \uff0c\u9632\u6b62\u540e\u7aef Api \u4e0d\u591f\u6807\u51c6\u7684\u5bb9\u9519\u673a\u5236 addCallAdapterFactory(new LiveDataCallAdapterFactory()) public class LiveDataCallAdapterFactory extends CallAdapter . Factory { @Override public CallAdapter <? , ?> get ( Type returnType , Annotation [] annotations , Retrofit retrofit ) { if ( getRawType ( returnType ) != LiveData . class ) { return null ; } Type observableType = getParameterUpperBound ( 0 , ( ParameterizedType ) returnType ); Class <?> rawObservableType = getRawType ( observableType ); if ( rawObservableType != ApiResponse . class ) { throw new IllegalArgumentException ( \"type must be a resource\" ); } if ( ! ( observableType instanceof ParameterizedType )) { throw new IllegalArgumentException ( \"resource must be parameterized\" ); } Type bodyType = getParameterUpperBound ( 0 , ( ParameterizedType ) observableType ); return new LiveDataCallAdapter <> ( bodyType ); } } \u4f7f\u7528 LiveData \u9002\u914d\u5668\u505a\u4e86\u8f6c\u6362\u5904\u7406\u3002","title":"2.retrofitService"},{"location":"%E5%9F%8B%E5%A0%86%E5%A0%86%E7%BD%91%E7%BB%9C%E9%83%A8%E5%88%86%E6%A2%B3%E7%90%86/#3networkresource","text":"\u53ef\u4ee5\u770b\u5230\u5728\u53d1\u9001\u7f51\u7edc\u8bf7\u6c42\u7684\u65f6\u5019\uff0c\u5bf9\u6b64\u7c7b\u8fdb\u884c\u8fd4\u56de\uff0c\u8fd9\u91cc\u662f\u5c06\u7f51\u7edc\u8bf7\u6c42\u7684\u56de\u8c03\u6570\u636e\u8fdb\u884c\u9884\u5904\u7406\uff0c\u91c7\u7528\u4e86\u62bd\u8c61\u65b9\u6cd5\uff0c\u5e76\u628a\u4e3b\u8981 careateCall \u65b9\u6cd5\u66b4\u9732\u51fa\u6765\uff0c\u6765\u8ddf\u4e0a\u4e00\u6b65\u8fdb\u884c\u8854\u63a5\uff0c\u83b7\u53d6\u7f51\u7edc\u6570\u636e\u540e\u8fdb\u884c\u6570\u636e\u9884\u5904\u7406\u3002\u5177\u4f53\u4ee3\u7801\u5982\u4e0b\uff1a public abstract class NetworkResource < T > { private final MediatorLiveData < Resource < T >> result = new MediatorLiveData <> (); @MainThread public NetworkResource () { result . setValue (( Resource < T > ) Resource . loading ( null , getRequestParam ())); fetchFromNetwork (); } @MainThread private void setValue ( Resource < T > newValue ) { if ( ! Objects . equals ( result . getValue (), newValue )) { result . setValue ( newValue ); } } private void fetchFromNetwork () { final LiveData < ApiResponse < ResponseModel < T >>> apiResponse = createCall (); result . addSource ( apiResponse , new Observer < ApiResponse < ResponseModel < T >>> () { @Override public void onChanged ( @Nullable final ApiResponse < ResponseModel < T >> requestTypeApiResponse ) { result . removeSource ( apiResponse ); final ResponseModel < T > responseModel = requestTypeApiResponse . body ; if ( requestTypeApiResponse . isSuccessful () && null != responseModel && responseModel . isSuccessful ()) { if ( responseModel . getActivityData () != null && responseModel . getActivityData (). getTaskInfo () != null ) { //\u6d3b\u52a8\u4efb\u52a1\u5b8c\u6210\u63d0\u793a TaskResultEvent . post ( responseModel . getActivityData ()); } setValue ( Resource . success ( requestTypeApiResponse , responseModel . getMsg (), responseModel . getMsgType (), responseModel . getData (), getRequestParam ())); } else { if ( null == responseModel ) { boolean isConnect = NetworkUtils . isNetworkConnected ( MddApplication . getApp ()); //\u5224\u65ad\u662f\u4e0d\u662f\u7f51\u7edc\u9519\u8bef if ( isConnect ) { setValue ( Resource . error ( requestTypeApiResponse , \"\u670d\u52a1\u5668\u51fa\u9519\uff0c\u8bf7\u7a0d\u540e\u91cd\u8bd5\" , getRequestParam ())); } else { setValue ( Resource . error ( requestTypeApiResponse , ResponseCode . ERROR_NO_NETWORK , \"\u4f3c\u4e4e\u5df2\u65ad\u5f00\u7f51\u7edc\u8fde\u63a5\uff0c\u8bf7\u68c0\u67e5\u7f51\u7edc\" , getRequestParam ())); } } else if ( responseModel . getMsgType () >= 1 && responseModel . getMsgType () <= 99 ) { //Token\u8fc7\u671f\u6253\u70b9\u901a\u77e5\u4e8b\u4ef6 TokenExpireEvent expireEvent = new TokenExpireEvent (); expireEvent . setRequestURL ( requestTypeApiResponse . requestURL ); expireEvent . setCode ( responseModel . getMsgType ()); expireEvent . setErrorMessage ( responseModel . getMsg ()); TokenExpireEvent . post ( expireEvent ); setValue ( Resource . tokenExpired ( requestTypeApiResponse , responseModel . getData (), getRequestParam ())); } else { setValue ( Resource . error ( requestTypeApiResponse , responseModel . getMsg (), responseModel . getMsgType (), responseModel . getData (), getRequestParam ())); } } } }); } public LiveData < Resource < T >> asLiveData () { return result ; } @NonNull @MainThread protected abstract LiveData < ApiResponse < ResponseModel < T >>> createCall (); protected BaseParam getRequestParam () { return null ; } }","title":"3.NetworkResource"},{"location":"%E5%9F%8B%E5%A0%86%E5%A0%86%E7%BD%91%E7%BB%9C%E9%83%A8%E5%88%86%E6%A2%B3%E7%90%86/#4baserepositoryparamwrapper","text":"\u8fd9\u4e2a\u65b9\u6cd5\u662f\u5bf9\u7f51\u7edc\u8bf7\u6c42\u53c2\u6570\u8fdb\u884c\u5305\u88c5\uff0c \u4e3b\u8981\u662f\u4e3a\u4e86\u8fdb\u884c md5 \u8fdb\u7b7e\u540d\uff0c\u540c\u65f6\u5bf9\u901a\u7528\u8bf7\u6c42\u6570\u636e\u8fdb\u884c\u6392\u5e8f\uff0c\u4fdd\u8bc1\u6570\u636e\u5b57\u7b26\u4e32\u7684\u987a\u5e8f\uff0c\u5728\u8fdb\u884c md5 \u7b7e\u540d\u6821\u9a8c\uff0c\u5177\u4f53\u7684\u53c2\u6570\u5982\u4e0b\uff1a RequestParam < T > requestParam = new RequestParam <> (); requestParam . setData ( data ); requestParam . setAppToken ( appToken ); requestParam . setTime ( time ); requestParam . setOs ( BuildConfig . OS ); requestParam . setVersion ( BuildConfig . VERSION_NAME ); requestParam . setChannel ( AppInfoModel . APP_CHANNEL ); requestParam . setDeviceNum ( AppInfoModel . UNIQUE_ID ); requestParam . setVisitorStatus ( visitorStatus ); \u6392\u5e8f\u7b7e\u540d\u51fd\u6570\uff1a StringBuilder dataStr = new StringBuilder (); try { String beanToJson = JsonUtil . beanToJson ( data ); if ( data instanceof List ) { JSONArray array = new JSONArray ( beanToJson ); int length = array . length (); for ( int i = 0 ; i < length ; i ++ ) { JSONObject obj = array . getJSONObject ( i ); Iterator < String > dataKeys = (( JSONObject ) obj ). keys (); List < String > dataKeyList = new ArrayList < String > (); while ( dataKeys . hasNext ()){ dataKeyList . add ( dataKeys . next ()); } Collections . sort ( dataKeyList ); for ( String dataKey : dataKeyList ) { dataStr . append ( dataKey ). append ( \"=\" ). append ( obj . get ( dataKey )). append ( \"&\" ); } } } else { JSONObject jsonObject = new JSONObject ( beanToJson ); Iterator < String > dataKeys = jsonObject . keys (); List < String > dataKeyList = new ArrayList <> (); while ( dataKeys . hasNext ()){ dataKeyList . add ( dataKeys . next ()); } Collections . sort ( dataKeyList ); for ( String dataKey : dataKeyList ) { dataStr . append ( dataKey ). append ( \"=\" ). append ( jsonObject . get ( dataKey )). append ( \"&\" ); } } } catch ( JSONException e ) { return requestParam ; } String signStr = \"os:\" + BuildConfig . OS + \"|version:\" + BuildConfig . VERSION_NAME + \"|action:/\" + action + \"|time:\" + requestParam . getTime () + \"|appToken:\" + appToken + \"|privateKey:\" + ApiURL . privateKey + \"|data:\" + dataStr . toString (); LogUtil . v ( \"SignStr:\" , signStr ); String sign = MD5 . MD5Encode ( signStr ); \u7136\u540e\u653e\u5230\u8bf7\u6c42\u53c2\u6570\u540e\uff0c\u8fd4\u56de\u8bf7\u6c42\u53c2\u6570\uff1a requestParam . setSign ( sign ); requestParam . setDeviceType ( AppInfoModel . isTabletDevice ? 1 : 0 ); return requestParam ;","title":"4.BaseRepository.paramWrapper"},{"location":"%E5%9F%8B%E5%A0%86%E5%A0%86%E7%BD%91%E7%BB%9C%E9%83%A8%E5%88%86%E6%A2%B3%E7%90%86/#5","text":"\u91c7\u7528 LiveData \u7684\u65b9\u5f0f\u8fdb\u884c\u53cc\u5411\u7ed1\u5b9a\uff0c\u6765\u8fdb\u884c\u7f51\u7edc\u8bf7\u6c42\u662f\u4f18\u70b9\uff0c\u4f7f\u7528\u6bd4\u8f83\u7b80\u5355\uff0c\u4f46\u540c\u65f6\u9ad8\u5ea6\u7684\u8026\u5408\u6027\u4e5f\u5bf9\u540e\u9762\u7684\u6269\u5c55\u4ea7\u751f\u4e86\u56f0\u96be\uff0c\u671f\u671b \u5728\u4e0b\u671f\u6216\u8005\u540e\u671f\u8fdb\u884c\u5355\u72ec\u62bd\u51fa\u4f7f\u7528\uff0c\u65b9\u4fbf\u6362\u5f15\u64ce\u6216\u8005\u8fdb\u884c\u5355\u70b9\u6d4b\u8bd5\u7b49\uff08\u82e5\u540e\u9762\u53ef\u4ee5\u4f7f\u7528\u534f\u6210\u7b49\u4e5f\u6709\u5f88\u597d\u7684\u6269\u5c55\u6027\uff09\uff0c\u540c\u65f6\u671f\u671b\u5bf9\u540e\u9762\u7684\u9519\u8bef\u56de\u8c03\uff0c\u9519\u8bef\u91cd\u8bd5\u7f13\u5b58\u7b56\u7565\u7b49\uff0c\u7528\u53c2\u6570\u65b9\u5f0f\u8fdb\u884c\u914d\u7f6e\u6765\u4f18\u5316\u3002","title":"5.\u5c0f\u7ed3"},{"location":"%E5%9F%8B%E5%A0%86%E5%A0%86%E7%BD%91%E7%BB%9C%E9%83%A8%E5%88%86%E6%A2%B3%E7%90%86/#6-faq","text":"\u4e3a\u4ec0\u4e48\u8981\u5bf9\u7f51\u7edc\u53c2\u6570\u8fdb\u884c\u6392\u5e8f \u56e0\u4e3a\u8981\u548c iOS \u7b7e\u540d\u7b97\u6cd5\u7edf\u4e00\uff0c\u90a3\u53c2\u6570\u5c31\u8981\u4fdd\u8bc1\u4e00\u6837\u7684\u987a\u5e8f\uff0c\u5219\u91c7\u7528\u53c2\u6570\u6392\u5e8f\u6765\u5bf9\u53c2\u6570\u4e00\u4e00\u5165\u5217","title":"6. FAQ"}]}